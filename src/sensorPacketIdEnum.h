#ifndef SENSOR_PACKET_ID_H
#define SENSOR_PACKET_ID_H

enum SensorPacketId {
    GROUP_0 = 0,
    GROUP_1 = 1,
    GROUP_2 = 2,
    GROUP_3 = 3,
    GROUP_4 = 4,
    GROUP_5 = 5,
    GROUP_6 = 6,
    BUMPS_AND_WHEEL_DROPS = 7,
    WALL = 8,
    CLIFF_LEFT = 9,
    CLIFF_FRONT_LEFT = 10,
    CLIFF_FRONT_RIGHT = 11,
    CLIFF_RIGHT = 12,
    VIRTUAL_WALL = 13,
    WHEEL_OVERCURRENTS = 14,
    DIRT_DETECT = 15,
    UNUSED_1 = 16,
    INFRARED_CHARACTER_OMNI = 17,
    BUTTONS_SENSOR = 18,
    DISTANCE = 19,
    ANGLE = 20,
    CHARGING_STATE = 21,
    VOLTAGE = 22,
    CURRENT = 23,
    TEMPERATURE = 24,
    BATTERY_CHARGE = 25,
    BATTERY_CAPACITY = 26,
    WALL_SIGNAL = 27,
    CLIFF_LEFT_SIGNAL = 28,
    CLIFF_FRONT_LEFT_SIGNAL = 29,
    CLIFF_FRONT_RIGHT_SIGNAL = 30,
    CLIFF_RIGHT_SIGNAL = 31,
    UNUSED_2 = 32,
    UNUSED_3 = 33,
    CHARGING_SOURCES_AVAILABLE = 34,
    OI_MODE = 35,
    SONG_NUMBER = 36,
    SONG_PLAYING = 37,
    NUMBER_OF_STREAM_PACKETS = 38,
    REQUESTED_VELOCITY = 39,
    REQUESTED_RADIUS = 40,
    REQUESTED_RIGHT_VELOCITY = 41,
    REQUESTED_LEFT_VELOCITY = 42,
    LEFT_ENCODER_COUNTS = 43,
    RIGHT_ENCODER_COUNTS = 44,
    LIGHT_BUMPER = 45,
    LIGHT_BUMP_LEFT_SIGNAL = 46,
    LIGHT_BUMP_FRONT_LEFT_SIGNAL = 47,
    LIGHT_BUMP_CENTER_LEFT_SIGNAL = 48,
    LIGHT_BUMP_CENTER_RIGHT_SIGNAL = 49,
    LIGHT_BUMP_FRONT_RIGHT_SIGNAL = 50,
    LIGHT_BUMP_RIGHT_SIGNAL = 51,
    INFRARED_CHARACTER_LEFT = 52,
    INFRARED_CHARACTER_RIGHT = 53,
    LEFT_MOTOR_CURRENT = 54,
    RIGHT_MOTOR_CURRENT = 55,
    MAIN_BRUSH_MOTOR_CURRENT = 56,
    SIDE_BRUSH_MOTOR_CURRENT = 57,
    STASIS = 58,
    GROUP_100 = 100,
    GROUP_101 = 101,
    GROUP_106 = 106,
    GROUP_107 = 107
};

struct GroupPacket {
    SensorPacketId id;
    int packetSize;
    SensorPacketId packets[52];
    int packetCount;
};

const GroupPacket groupPackets[] = {
    {GROUP_0, 26, {BUMPS_AND_WHEEL_DROPS, WALL, CLIFF_LEFT, CLIFF_FRONT_LEFT, CLIFF_FRONT_RIGHT, CLIFF_RIGHT, VIRTUAL_WALL, WHEEL_OVERCURRENTS, DIRT_DETECT, UNUSED_1, INFRARED_CHARACTER_OMNI, BUTTONS_SENSOR, DISTANCE, ANGLE, CHARGING_STATE, VOLTAGE, CURRENT, TEMPERATURE, BATTERY_CHARGE, BATTERY_CAPACITY}, 20},
    {GROUP_1, 10, {BUMPS_AND_WHEEL_DROPS, WALL, CLIFF_LEFT, CLIFF_FRONT_LEFT, CLIFF_FRONT_RIGHT, CLIFF_RIGHT, VIRTUAL_WALL, WHEEL_OVERCURRENTS, DIRT_DETECT, UNUSED_1}, 10},
    {GROUP_2, 6, {INFRARED_CHARACTER_OMNI, BUTTONS_SENSOR, DISTANCE, ANGLE}, 4},
    {GROUP_3, 10, {CHARGING_STATE, VOLTAGE, CURRENT, TEMPERATURE, BATTERY_CHARGE, BATTERY_CAPACITY}, 6},
    {GROUP_4, 14, {WALL_SIGNAL, CLIFF_LEFT_SIGNAL, CLIFF_FRONT_LEFT_SIGNAL, CLIFF_FRONT_RIGHT_SIGNAL, CLIFF_RIGHT_SIGNAL, UNUSED_2, UNUSED_3, CHARGING_SOURCES_AVAILABLE}, 8},
    {GROUP_5, 12, {OI_MODE, SONG_NUMBER, SONG_PLAYING, NUMBER_OF_STREAM_PACKETS, REQUESTED_VELOCITY, REQUESTED_RADIUS, REQUESTED_RIGHT_VELOCITY, REQUESTED_LEFT_VELOCITY}, 8},
    {GROUP_6, 52, {BUMPS_AND_WHEEL_DROPS, WALL, CLIFF_LEFT, CLIFF_FRONT_LEFT, CLIFF_FRONT_RIGHT, CLIFF_RIGHT, VIRTUAL_WALL, WHEEL_OVERCURRENTS, DIRT_DETECT, UNUSED_1, INFRARED_CHARACTER_OMNI, BUTTONS_SENSOR, DISTANCE, ANGLE, CHARGING_STATE, VOLTAGE, CURRENT, TEMPERATURE, BATTERY_CHARGE, BATTERY_CAPACITY, WALL_SIGNAL, CLIFF_LEFT_SIGNAL, CLIFF_FRONT_LEFT_SIGNAL, CLIFF_FRONT_RIGHT_SIGNAL, CLIFF_RIGHT_SIGNAL, UNUSED_2, UNUSED_3, CHARGING_SOURCES_AVAILABLE, OI_MODE, SONG_NUMBER, SONG_PLAYING, NUMBER_OF_STREAM_PACKETS, REQUESTED_VELOCITY, REQUESTED_RADIUS, REQUESTED_RIGHT_VELOCITY, REQUESTED_LEFT_VELOCITY}, 36},
    {GROUP_100, 80, {BUMPS_AND_WHEEL_DROPS, WALL, CLIFF_LEFT, CLIFF_FRONT_LEFT, CLIFF_FRONT_RIGHT, CLIFF_RIGHT, VIRTUAL_WALL, WHEEL_OVERCURRENTS, DIRT_DETECT, UNUSED_1, INFRARED_CHARACTER_OMNI, BUTTONS_SENSOR, DISTANCE, ANGLE, CHARGING_STATE, VOLTAGE, CURRENT, TEMPERATURE, BATTERY_CHARGE, BATTERY_CAPACITY, WALL_SIGNAL, CLIFF_LEFT_SIGNAL, CLIFF_FRONT_LEFT_SIGNAL, CLIFF_FRONT_RIGHT_SIGNAL, CLIFF_RIGHT_SIGNAL, UNUSED_2, UNUSED_3, CHARGING_SOURCES_AVAILABLE, OI_MODE, SONG_NUMBER, SONG_PLAYING, NUMBER_OF_STREAM_PACKETS, REQUESTED_VELOCITY, REQUESTED_RADIUS, REQUESTED_RIGHT_VELOCITY, REQUESTED_LEFT_VELOCITY, LEFT_ENCODER_COUNTS, RIGHT_ENCODER_COUNTS, LIGHT_BUMPER, LIGHT_BUMP_LEFT_SIGNAL, LIGHT_BUMP_FRONT_LEFT_SIGNAL, LIGHT_BUMP_CENTER_LEFT_SIGNAL, LIGHT_BUMP_CENTER_RIGHT_SIGNAL, LIGHT_BUMP_FRONT_RIGHT_SIGNAL, LIGHT_BUMP_RIGHT_SIGNAL, INFRARED_CHARACTER_LEFT, INFRARED_CHARACTER_RIGHT, LEFT_MOTOR_CURRENT, RIGHT_MOTOR_CURRENT, MAIN_BRUSH_MOTOR_CURRENT, SIDE_BRUSH_MOTOR_CURRENT, STASIS}, 52},
    {GROUP_101, 28, {LEFT_ENCODER_COUNTS, RIGHT_ENCODER_COUNTS, LIGHT_BUMPER, LIGHT_BUMP_LEFT_SIGNAL, LIGHT_BUMP_FRONT_LEFT_SIGNAL, LIGHT_BUMP_CENTER_LEFT_SIGNAL, LIGHT_BUMP_CENTER_RIGHT_SIGNAL, LIGHT_BUMP_FRONT_RIGHT_SIGNAL, LIGHT_BUMP_RIGHT_SIGNAL, INFRARED_CHARACTER_LEFT, INFRARED_CHARACTER_RIGHT, LEFT_MOTOR_CURRENT, RIGHT_MOTOR_CURRENT, MAIN_BRUSH_MOTOR_CURRENT, SIDE_BRUSH_MOTOR_CURRENT, STASIS}, 16},
    {GROUP_106, 12, {LIGHT_BUMP_LEFT_SIGNAL, LIGHT_BUMP_FRONT_LEFT_SIGNAL, LIGHT_BUMP_CENTER_LEFT_SIGNAL, LIGHT_BUMP_CENTER_RIGHT_SIGNAL, LIGHT_BUMP_FRONT_RIGHT_SIGNAL, LIGHT_BUMP_RIGHT_SIGNAL}, 6},
    {GROUP_107, 9, {LEFT_MOTOR_CURRENT, RIGHT_MOTOR_CURRENT, MAIN_BRUSH_MOTOR_CURRENT, SIDE_BRUSH_MOTOR_CURRENT, STASIS}, 5}
};

bool isGroupPacket(SensorPacketId packetID) {
    for (const auto& groupPacket : groupPackets) {
        if (groupPacket.id == packetID) {
            return true;
        }
    }
    return false;
}

#endif // SENSOR_PACKET_ID_H